#!/usr/bin/env python

import socket as sk
import os
from urlparse import urlparse
import sys

def mkDownloadRequest(serv, objName, filesize, end_point):
	return ("GET {o} HTTP/1.1\r\n"+"Host: {s}"+"\r\n" + "Range: bytes={h}-{e}"+"\r\n\r\n").format(o=objName, s=serv, h=str(filesize), e=str(end_point))

def open_socket(path, file_name, start_point):

	url = urlparse(path)

	servName = url[1]
	obj = url[2]
	port = url.port

	if port == None:
		port = 80

	## creat an empty socket
	sock = sk.socket(sk.AF_INET, sk.SOCK_STREAM)

	## connect to a destination as specified by the pair
	sock.connect((servName, port))

	request = mkDownloadRequest(servName, obj, start_point)
	sock.send(request)

	return sock

def get_header(sock_):
	data = ""
	while True:
		data_chunk = sock_.recv(1024)
		data += data_chunk
		if "\r\n\r\n" in data:
			end_header_index = data.find("\r\n\r\n")
			header = data[:end_header_index+3] # +3 for \r\n\r\n
			the_rest = data[end_header_index+4:] # +4 for \r\n\r\n
			break

	return header, the_rest



def get_content_length(header):

	if "Content-Length:" not in header:
		content_length_num = 0
	else:
		content_length_index = header.find("Content-Length:")
		end_header_index = header.find("\r\n\r\n")
		content_length_line = header[content_length_index:end_header_index]

		end_content_length_line_index = content_length_line.find("\r\n")
		colon_index = content_length_line.find(":")

		content_length_num = content_length_line[colon_index+2:end_content_length_line_index]


	return content_length_num

def srget():
	path = sys.argv[3]
	file_name = sys.argv[2]

	if "https" in path:
		sys.exit(2)
	elif "http://" not in path:
		path = "http://" + path

	if os.path.exists(file_name):
		
		file_size = os.path.getsize(file_name)

		fh = open("header_"+file_name, "r")

		for line in fh:
			if "ETag:" in line:
				ETag_index = line.find("ETag:")
				ETag_old_file = line[ETag_index:]

				end_ETag_old_file_line_index = ETag_old_file.find("\r\n")

				ETag_old_file_line = ETag_old_file[:end_ETag_old_file_line_index]

				print "ETag_old_file_line", ETag_old_file_line

				find_colon = ETag_old_file_line.find(": ")

				ETag_id = ETag_old_file_line[find_colon+2:]

				print "ETag_id", ETag_id

				fh.close()



	else:
		sock = open_socket(path, file_name, 0)

		header, the_rest = get_header(sock)

		data_body = the_rest

		content_length = get_content_length(header)

		fh = open("header_"+file_name, "a+")

		fh.write(header)
		fh.flush()

		f = open(file_name, "a+")
		f.write(the_rest)
		f.flush()

		while True:
			if content_length == 0 and len(data_chunk) == 0:
				os.remove("header_"+file_name)
				f.close()
				break
			elif len(data_body) == int(content_length):
				os.remove("header_"+file_name)
				f.close()
				sock_.close()
				break
			else:
				data_chunk = sock_.recv(1024)
				data_body += data_chunk

				f.write(data_chunk)
				f.flush()
	return data_body






