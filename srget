#!/usr/bin/env python

import socket as sk
import os
from urlparse import urlparse
import sys
from cStringIO import StringIO

def headerDownloadRequest(serv, objName):
	return ("HEAD {o} HTTP/1.1\r\n"+"Host: {s}"+"\r\n" + "\r\n\r\n").format(o=objName, s=serv)

def mkDownloadRequest(serv, objName, filesize, end_point):
	return ("GET {o} HTTP/1.1\r\n"+"Host: {s}"+"\r\n" + "Range: bytes={h}-{e}"+"\r\n\r\n").format(o=objName, s=serv, h=str(filesize), e=str(end_point))

def open_socket(path, file_name, start_point, end_point):

	url = urlparse(path)

	servName = url[1]
	obj = url[2]
	port = url.port

	if port == None:
		port = 80

	## creat an empty socket
	sock = sk.socket(sk.AF_INET, sk.SOCK_STREAM)

	## connect to a destination as specified by the pair
	sock.connect((servName, port))

	request = mkDownloadRequest(servName, obj, start_point, end_point)
	sock.send(request)

	return sock

def get_header(sock_):
	data = ""
	while True:
		data_chunk = sock_.recv(1024)
		data += data_chunk
		if "\r\n\r\n" in data:
			end_header_index = data.find("\r\n\r\n")
			header = data[:end_header_index+3] # +3 for \r\n\r\n
			the_rest = data[end_header_index+4:] # +4 for \r\n\r\n
			break

	return header, the_rest

def get_header_from_sock(path):
	url = urlparse(path)

	servName = url[1]
	obj = url[2]
	port = url.port

	if port == None:
		port = 80

	## creat an empty socket
	sock = sk.socket(sk.AF_INET, sk.SOCK_STREAM)

	## connect to a destination as specified by the pair
	sock.connect((servName, port))

	request = headerDownloadRequest(servName, obj)
	sock.send(request)

	header = sock.recv(1024)

	sock.close()

	return header

def get_content_length(header):

	if "Content-Length:" not in header:
		content_length_num = 0
	else:
		content_length_index = header.find("Content-Length:")
		end_header_index = header.find("\r\n\r\n")
		content_length_line = header[content_length_index:end_header_index]

		end_content_length_line_index = content_length_line.find("\r\n")
		colon_index = content_length_line.find(":")

		content_length_num = content_length_line[colon_index+2:end_content_length_line_index]


	return content_length_num

def read_header_file(header_file):

	header_file = open(header_file, "r")
	header = ""

	for line in header_file:
		header += line

	return header

def get_ETag(header):

	str_header = StringIO(header)
	ETag = None
	for line in str_header:
		if "ETag:" in line:
			find_quote = line.find('"')
			end_line = line.find("\r\n")

			ETag = line[find_quote:end_line]

			break

	return ETag

def get_last_modified(header):

	str_header = StringIO(header)
	last_modified = None
	for line in str_header:
		if "Last-Modified" in line:
			find_colon = line.find(": ")
			end_line = line.find("\r\n")
			last_modified = line[find_colon+2:end_line]

			break

	return last_modified

def srget():

	path = sys.argv[3]
	file_name = sys.argv[2]

	if "https" in path:
		sys.exit(2)
	elif "http://" not in path:
		path = "http://" + path

	if os.path.exists(file_name):

		file_size = os.path.getsize(file_name)

		content_length = get_content_length(get_header_from_sock(path))

		if file_size == int(content_length):
			print "The file is already complete."
			sys.exit(2)
		else:

			ETag = get_ETag(get_header_from_sock(path))
			Etag_old_file = get_ETag(read_header_file("header_"+file_name+"_temp.txt"))

			last_modified = get_last_modified(get_header_from_sock(path))
			last_modified_old_file = get_last_modified(read_header_file("header_"+file_name+"_temp.txt"))

			content_length_old_file = get_content_length(read_header_file("header_"+file_name+"_temp.txt"))

			resume = False

			if ETag == Etag_old_file:
				resume = True
			elif last_modified == last_modified_old_file:
				resume = True
			else:
				resume = False

			if resume:

				sock = open_socket(path, file_name, file_size, content_length_old_file)

				header, the_rest = get_header(sock)

				data_body = the_rest

				f = open(file_name, "a+")
				f.write(the_rest)
				f.flush()

				len_content = file_size + len(the_rest)

				while True:

					print "len_content", len_content
					print "content_length", int(content_length)

					if len_content == int(content_length):
						os.remove("header_"+file_name+"_temp.txt")
						f.close()
						sock.close()
						break
					else:
						data_chunk = sock.recv(1024)
						data_body += data_chunk

						len_content += len(data_chunk)

						f.write(data_chunk)
						f.flush()
			else:

				sock = open_socket(path, file_name, 0, "")

				header, the_rest = get_header(sock)

				data_body = the_rest

				content_length = get_content_length(header)

				header_file_name = "header_"+file_name+"_temp.txt"

				header_file = open(header_file_name, "a+")

				header_file.write(header)
				header_file.flush()

				header_file.close()

				f = open(file_name, "a+")
				f.write(the_rest)
				f.flush()

				while True:
					if content_length == 0 and len(data_chunk) == 0:
						os.remove("header_"+file_name+"_temp.txt")
						f.close()
						break
					elif len(data_body) == int(content_length):
						os.remove("header_"+file_name+"_temp.txt")
						f.close()
						sock.close()
						break
					else:
						data_chunk = sock.recv(1024)
						data_body += data_chunk

						f.write(data_chunk)
						f.flush()

	else:
		sock = open_socket(path, file_name, 0, "")

		header, the_rest = get_header(sock)

		data_body = the_rest

		content_length = get_content_length(header)

		header_file_name = "header_"+file_name+"_temp.txt"

		header_file = open(header_file_name, "a+")

		header_file.write(header)
		header_file.flush()

		header_file.close()

		f = open(file_name, "a+")
		f.write(the_rest)
		f.flush()

		while True:
			if content_length == 0 and len(data_chunk) == 0:
				os.remove("header_"+file_name+"_temp.txt")
				f.close()
				break
			elif len(data_body) == int(content_length):
				os.remove("header_"+file_name+"_temp.txt")
				f.close()
				sock.close()
				break
			else:
				data_chunk = sock.recv(1024)
				data_body += data_chunk

				f.write(data_chunk)
				f.flush()

srget()




















