#!/usr/bin/env python


#create socket
#bind socket
#connect socket
#send request



#open file

#get each piece of info from socket

#write each piece of info into file

#when done

#   readfile and cut off header

import socket as sk
import os
from urlparse import urlparse
import sys


def srget():

	print sys.argv

	path = sys.argv[3]
	file_name = sys.argv[2]

	# print file_name, path

	if "https" in path:
		sys.exit(2)
	elif "http://" not in path:
		path = "http://" + path

	def mkDownloadRequest(serv, objName):
		return ("GET {o} HTTP/1.1\r\n"+"Host: {s}"+"\r\n\r\n").format(o=objName, s=serv)

	#print "{!r}".format(mkDownloadRequest("intranet.mahidol", "/"))


	url = urlparse(path)

	# servName = "www.google.com"
	# obj = "/"
	# servName = "cs.muic.mahidol.ac.th"
	# obj = "/courses/ds/hw/a1.pdf"
	# port = 80

	servName = url[1]
	obj = url[2]
	port = url.port

	if port == None:
		port = 80

	# print servName
	# print port

	## creat an empty socket
	sock = sk.socket(sk.AF_INET, sk.SOCK_STREAM)

	## connect to a destination as specified by the pair
	sock.connect((servName, port))

	request = mkDownloadRequest(servName, obj)
	sock.send(request)

	# data_body = None
	# content_length_num = None
	def get_header(sock_):
		data = ""
		while True:
			data_chunk = sock_.recv(1024)
			data += data_chunk
			if "\r\n\r\n" in data:
				end_header_index = data.find("\r\n\r\n")
				header = data[:end_header_index+3] # +3 for \r\n\r\n
				the_rest = data[end_header_index+4:] # +4 for \r\n\r\n
				break

		return header, the_rest


	# print get_header(sock)


	def get_content_length(header):

		if "Content-Length:" not in header:
			content_length_num = 0
		else:
			content_length_index = header.find("Content-Length:")
			end_header_index = header.find("\r\n\r\n")
			content_length_line = header[content_length_index:end_header_index]

			end_content_length_line_index = content_length_line.find("\r\n")
			colon_index = content_length_line.find(":")

			content_length_num = content_length_line[colon_index+2:end_content_length_line_index]


		print "content_length_num", content_length_num

		return content_length_num

	# print get_content_length(sock)

	def get_content(sock_):
		f = open(file_name, "a+")
		fh = open("header_"+file_name, "a+")

		header, the_rest = get_header(sock_)

		print header
		data_body = the_rest
		# print data_body
		content_length = get_content_length(header)
		print content_length
		# print content_length

		fh.write(header)
		# f.write(data_body)

		while True:
			if content_length == 0 and len(data_chunk) == 0:
				print "full"
				# f.write(data_body)
				os.remove("header_"+file_name)
				f.close()
				break
			elif len(data_body) == int(content_length):
				print len(data_body)
				print "full"
				# f.write(data_body)
				os.remove("header_"+file_name)
				f.close()
				sock_.close()
				break
			else:
				data_chunk = sock_.recv(1024)
				data_body += data_chunk

				f.write(data_chunk)
				f.flush()

			# 	f.write(data_body)

			# if len(data_body) == int(content_length):
			# 	print len(data_body)
			# 	print "full"
			# 	f.write(data_body)
			# 	os.remove("header_"+file_name)
			# 	f.close()
			# 	break
			
			# data_chunk = sock_.recv(1024)
			# data_body += data_chunk

			# f.write(data_body)

			
		# print data_body

		return header, data_body

	# print get_content(sock)
	get_content(sock)

	
srget()






	

# if not os.path.exist

# f = open("data", 'w')

# while True:
# 	data = sock.recv(1024)
# 	f.write(data)


# 	# f.close
# 	# sock.close()
# 	break



# file_info = r.read()
# print file_info




















